"""Add created and updated columns to solarman schema tables

Revision ID: c1df11a0390b
Revises: 2d4be5c0131d
Create Date: 2025-03-29 14:20:46.881114

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c1df11a0390b'
down_revision: Union[str, None] = '2d4be5c0131d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
    op.add_column('devices', sa.Column('created', sa.DateTime(), nullable=False, server_default=sa.func.now()), schema='solarman')
    op.add_column('devices', sa.Column('updated', sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()), schema='solarman')
    op.add_column('station_data_daily', sa.Column('created', sa.DateTime(), nullable=False, server_default=sa.func.now()), schema='solarman')
    op.add_column('station_data_daily', sa.Column('updated', sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()), schema='solarman')
    op.add_column('stations', sa.Column('created', sa.DateTime(), nullable=False, server_default=sa.func.now()), schema='solarman')
    op.add_column('stations', sa.Column('updated', sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()), schema='solarman')
    op.add_column('device_site_history', sa.Column('created', sa.DateTime(), nullable=False, server_default=sa.func.now()), schema='solarman')
    op.add_column('device_site_history', sa.Column('updated', sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()), schema='solarman')
    op.add_column('inverter_data', sa.Column('created', sa.DateTime(), nullable=False, server_default=sa.func.now()), schema='solarman')
    op.add_column('inverter_data', sa.Column('updated', sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()), schema='solarman')
    op.add_column('weather', sa.Column('created', sa.DateTime(), nullable=False, server_default=sa.func.now()), schema='solarman')
    op.add_column('weather', sa.Column('updated', sa.DateTime(), nullable=False, server_default=sa.func.now(), onupdate=sa.func.now()), schema='solarman')

def downgrade():
    op.drop_column('devices', 'created', schema='solarman')
    op.drop_column('devices', 'updated', schema='solarman')
    op.drop_column('station_data_daily', 'created', schema='solarman')
    op.drop_column('station_data_daily', 'updated', schema='solarman')
    op.drop_column('stations', 'created', schema='solarman')
    op.drop_column('stations', 'updated', schema='solarman')
    op.drop_column('device_site_history', 'created', schema='solarman')
    op.drop_column('device_site_history', 'updated', schema='solarman')
    op.drop_column('inverter_data', 'created', schema='solarman')
    op.drop_column('inverter_data', 'updated', schema='solarman')
    op.drop_column('weather', 'created', schema='solarman')
    op.drop_column('weather', 'updated', schema='solarman')


def upgrade_shit() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('devices',
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('device_id', sa.BigInteger(), nullable=False),
    sa.Column('device_type', sa.String(length=50), nullable=False),
    sa.Column('connect_status', sa.Integer(), nullable=False),
    sa.Column('collection_time', sa.BigInteger(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('device_sn'),
    schema='solarman'
    )
    op.create_index('idx_devices_device_id', 'devices', ['device_id'], unique=False, schema='solarman')
    op.create_index('idx_devices_device_sn', 'devices', ['device_sn'], unique=False, schema='solarman')
    op.create_table('station_data_daily',
    sa.Column('station_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('ts', sa.DateTime(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('day', sa.Integer(), nullable=False),
    sa.Column('generation_power', sa.Float(), nullable=True),
    sa.Column('use_power', sa.Float(), nullable=True),
    sa.Column('grid_power', sa.Float(), nullable=True),
    sa.Column('purchase_power', sa.Float(), nullable=True),
    sa.Column('wire_power', sa.Float(), nullable=True),
    sa.Column('charge_power', sa.Float(), nullable=True),
    sa.Column('discharge_power', sa.Float(), nullable=True),
    sa.Column('battery_power', sa.Float(), nullable=True),
    sa.Column('battery_soc', sa.Float(), nullable=True),
    sa.Column('irradiate_intensity', sa.Float(), nullable=True),
    sa.Column('generation_value', sa.Float(), nullable=True),
    sa.Column('generation_ratio', sa.Float(), nullable=True),
    sa.Column('grid_ratio', sa.Float(), nullable=True),
    sa.Column('charge_ratio', sa.Float(), nullable=True),
    sa.Column('use_value', sa.Float(), nullable=True),
    sa.Column('use_ratio', sa.Float(), nullable=True),
    sa.Column('buy_ratio', sa.Float(), nullable=True),
    sa.Column('use_discharge_ratio', sa.Float(), nullable=True),
    sa.Column('grid_value', sa.Float(), nullable=True),
    sa.Column('buy_value', sa.Float(), nullable=True),
    sa.Column('charge_value', sa.Float(), nullable=True),
    sa.Column('discharge_value', sa.Float(), nullable=True),
    sa.Column('full_power_hours', sa.Float(), nullable=True),
    sa.Column('irradiate', sa.Float(), nullable=True),
    sa.Column('theoretical_generation', sa.Float(), nullable=True),
    sa.Column('pr', sa.Float(), nullable=True),
    sa.Column('cpr', sa.Float(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('station_id', 'ts'),
    schema='solarman'
    )
    op.create_index('idx_station_data_id', 'station_data_daily', ['station_id'], unique=False, schema='solarman')
    op.create_index('idx_station_data_ts', 'station_data_daily', ['ts'], unique=False, schema='solarman')
    op.create_table('stations',
    sa.Column('id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('location_lat', sa.Float(), nullable=True),
    sa.Column('location_lng', sa.Float(), nullable=True),
    sa.Column('location_address', sa.String(length=255), nullable=True),
    sa.Column('region_nation_id', sa.Integer(), nullable=True),
    sa.Column('region_level1', sa.Integer(), nullable=True),
    sa.Column('region_level2', sa.Integer(), nullable=True),
    sa.Column('region_level3', sa.Integer(), nullable=True),
    sa.Column('region_level4', sa.Integer(), nullable=True),
    sa.Column('region_level5', sa.Integer(), nullable=True),
    sa.Column('region_timezone', sa.String(length=50), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('grid_interconnection_type', sa.String(length=50), nullable=True),
    sa.Column('installed_capacity', sa.Float(), nullable=True),
    sa.Column('start_operating_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('station_image', sa.String(length=255), nullable=True),
    sa.Column('created_date', sa.TIMESTAMP(), nullable=True),
    sa.Column('battery_soc', sa.Float(), nullable=True),
    sa.Column('network_status', sa.String(length=50), nullable=True),
    sa.Column('generation_power', sa.Float(), nullable=True),
    sa.Column('last_update_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('contact_phone', sa.String(length=50), nullable=True),
    sa.Column('owner_name', sa.String(length=255), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_station_name'),
    schema='solarman'
    )
    op.create_index('idx_stations_name', 'stations', ['name'], unique=False, schema='solarman')
    op.create_table('temp_weather',
    sa.Column('station_id', sa.BigInteger(), nullable=True),
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('org_epoch', sa.Integer(), nullable=True),
    sa.Column('epoch', sa.Integer(), nullable=True),
    sa.Column('ts', sa.DateTime(timezone=True), nullable=False),
    sa.Column('temp_c', sa.Float(), nullable=True),
    sa.Column('panel_temp', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('rainfall', sa.Float(), nullable=True),
    sa.Column('irr', sa.Float(), nullable=True),
    sa.Column('daily_irr', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('device_id', 'device_sn', 'ts'),
    schema='solarman'
    )
    op.create_table('device_site_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('station_id', sa.BigInteger(), nullable=False),
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('device_id', sa.BigInteger(), nullable=False),
    sa.Column('comment', sa.String(length=255), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['device_sn'], ['solarman.devices.device_sn'], ),
    sa.ForeignKeyConstraint(['station_id'], ['solarman.stations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='solarman'
    )
    op.create_index('idx_device_site_history_device_sn', 'device_site_history', ['device_sn'], unique=False, schema='solarman')
    op.create_table('inverter_data',
    sa.Column('ts', sa.DateTime(), nullable=False),
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('device_id', sa.BigInteger(), nullable=True),
    sa.Column('inverter_type', sa.String(length=255), nullable=True),
    sa.Column('output_power_level', sa.String(length=255), nullable=True),
    sa.Column('rated_power', sa.Numeric(), nullable=True),
    sa.Column('parallel_information', sa.String(length=255), nullable=True),
    sa.Column('device_type', sa.JSON(), nullable=True),
    sa.Column('system_time', sa.DateTime(), nullable=True),
    sa.Column('protocol_version', sa.String(length=255), nullable=True),
    sa.Column('main_data', sa.String(length=255), nullable=True),
    sa.Column('hmi', sa.String(length=255), nullable=True),
    sa.Column('lithium_battery_version_number', sa.String(length=255), nullable=True),
    sa.Column('control_board_activator_version_number', sa.String(length=255), nullable=True),
    sa.Column('control_board_assisted_microcontroller_version_number', sa.String(length=255), nullable=True),
    sa.Column('arc_board_firmware_version', sa.String(length=255), nullable=True),
    sa.Column('dc_voltage_pv1', sa.Float(), nullable=True),
    sa.Column('dc_voltage_pv2', sa.Float(), nullable=True),
    sa.Column('dc_voltage_pv3', sa.Float(), nullable=True),
    sa.Column('dc_voltage_pv4', sa.Float(), nullable=True),
    sa.Column('dc_current_pv1', sa.Float(), nullable=True),
    sa.Column('dc_current_pv2', sa.Float(), nullable=True),
    sa.Column('dc_current_pv3', sa.Float(), nullable=True),
    sa.Column('dc_current_pv4', sa.Float(), nullable=True),
    sa.Column('dc_power_pv1', sa.Float(), nullable=True),
    sa.Column('dc_power_pv2', sa.Float(), nullable=True),
    sa.Column('dc_power_pv3', sa.Float(), nullable=True),
    sa.Column('dc_power_pv4', sa.Float(), nullable=True),
    sa.Column('total_production_active', sa.Float(), nullable=True),
    sa.Column('ac_voltage_r_u_a', sa.Float(), nullable=True),
    sa.Column('ac_voltage_s_v_b', sa.Float(), nullable=True),
    sa.Column('ac_voltage_t_w_c', sa.Float(), nullable=True),
    sa.Column('ac_current_r_u_a', sa.Float(), nullable=True),
    sa.Column('ac_current_s_v_b', sa.Float(), nullable=True),
    sa.Column('ac_current_t_w_c', sa.Float(), nullable=True),
    sa.Column('ac_output_frequency_r', sa.Float(), nullable=True),
    sa.Column('cumulative_production_active', sa.Float(), nullable=True),
    sa.Column('daily_production_active', sa.Float(), nullable=True),
    sa.Column('inverter_output_power_l1', sa.Float(), nullable=True),
    sa.Column('inverter_output_power_l2', sa.Float(), nullable=True),
    sa.Column('inverter_output_power_l3', sa.Float(), nullable=True),
    sa.Column('total_inverter_output_power', sa.Float(), nullable=True),
    sa.Column('total_solar_power', sa.Float(), nullable=True),
    sa.Column('grid_voltage_l1', sa.Float(), nullable=True),
    sa.Column('grid_current_l1', sa.Float(), nullable=True),
    sa.Column('grid_power_l1', sa.Float(), nullable=True),
    sa.Column('grid_voltage_l2', sa.Float(), nullable=True),
    sa.Column('grid_current_l2', sa.Float(), nullable=True),
    sa.Column('grid_power_l2', sa.Float(), nullable=True),
    sa.Column('grid_voltage_l3', sa.Float(), nullable=True),
    sa.Column('grid_current_l3', sa.Float(), nullable=True),
    sa.Column('grid_power_l3', sa.Float(), nullable=True),
    sa.Column('grid_status', sa.String(length=255), nullable=True),
    sa.Column('external_ct1_power', sa.Float(), nullable=True),
    sa.Column('external_ct2_power', sa.Float(), nullable=True),
    sa.Column('external_ct3_power', sa.Float(), nullable=True),
    sa.Column('total_external_ct_power', sa.Float(), nullable=True),
    sa.Column('grid_frequency', sa.Float(), nullable=True),
    sa.Column('total_grid_power', sa.Float(), nullable=True),
    sa.Column('total_grid_reactive_power', sa.Float(), nullable=True),
    sa.Column('a_phase_reactive_power_of_power_grid', sa.Float(), nullable=True),
    sa.Column('b_phase_reactive_power_of_power_grid', sa.Float(), nullable=True),
    sa.Column('c_phase_reactive_power_of_power_grid', sa.Float(), nullable=True),
    sa.Column('daily_energy_buy', sa.Float(), nullable=True),
    sa.Column('daily_energy_sell', sa.Float(), nullable=True),
    sa.Column('total_energy_buy', sa.Float(), nullable=True),
    sa.Column('total_energy_sell', sa.Float(), nullable=True),
    sa.Column('internal_l1_power', sa.Float(), nullable=True),
    sa.Column('internal_l2_power', sa.Float(), nullable=True),
    sa.Column('internal_l3_power', sa.Float(), nullable=True),
    sa.Column('internal_power', sa.Float(), nullable=True),
    sa.Column('inverter_a_phase_reactive_power', sa.Float(), nullable=True),
    sa.Column('inverted_b_phase_reactive_power', sa.Float(), nullable=True),
    sa.Column('inverted_c_phase_reactive_power', sa.Float(), nullable=True),
    sa.Column('mppt_number_of_routes_and_phases', sa.String(length=255), nullable=True),
    sa.Column('load_voltage_l1', sa.Float(), nullable=True),
    sa.Column('load_voltage_l2', sa.Float(), nullable=True),
    sa.Column('load_voltage_l3', sa.Float(), nullable=True),
    sa.Column('load_power_l1', sa.Float(), nullable=True),
    sa.Column('load_power_l2', sa.Float(), nullable=True),
    sa.Column('load_power_l3', sa.Float(), nullable=True),
    sa.Column('total_consumption_power', sa.Float(), nullable=True),
    sa.Column('total_consumption_apparent_power', sa.Float(), nullable=True),
    sa.Column('daily_consumption', sa.Float(), nullable=True),
    sa.Column('total_consumption', sa.Float(), nullable=True),
    sa.Column('load_frequency', sa.Float(), nullable=True),
    sa.Column('load_phase_power_a', sa.Float(), nullable=True),
    sa.Column('load_phase_power_b', sa.Float(), nullable=True),
    sa.Column('load_phase_power_c', sa.Float(), nullable=True),
    sa.Column('battery_status', sa.String(length=255), nullable=True),
    sa.Column('battery_voltage', sa.Float(), nullable=True),
    sa.Column('battery_power1', sa.Float(), nullable=True),
    sa.Column('battery_current1', sa.Float(), nullable=True),
    sa.Column('battery_current2', sa.Float(), nullable=True),
    sa.Column('battery_power', sa.Float(), nullable=True),
    sa.Column('soc', sa.Float(), nullable=True),
    sa.Column('total_charging_energy', sa.Float(), nullable=True),
    sa.Column('total_discharging_energy', sa.Float(), nullable=True),
    sa.Column('daily_charging_energy', sa.Float(), nullable=True),
    sa.Column('daily_discharging_energy', sa.Float(), nullable=True),
    sa.Column('battery_rated_capacity', sa.Float(), nullable=True),
    sa.Column('battery_type', sa.String(length=255), nullable=True),
    sa.Column('battery_mode', sa.JSON(), nullable=True),
    sa.Column('battery_factory', sa.String(length=255), nullable=True),
    sa.Column('battery_1_status', sa.String(length=255), nullable=True),
    sa.Column('battery_total_current', sa.Float(), nullable=True),
    sa.Column('battery_2_status', sa.String(length=255), nullable=True),
    sa.Column('bms_voltage', sa.Float(), nullable=True),
    sa.Column('bms_current', sa.Float(), nullable=True),
    sa.Column('bms_temperature', sa.Float(), nullable=True),
    sa.Column('bms_charge_voltage', sa.Float(), nullable=True),
    sa.Column('bms_discharge_voltage', sa.Float(), nullable=True),
    sa.Column('charge_current_limit', sa.Float(), nullable=True),
    sa.Column('discharge_current_limit', sa.Float(), nullable=True),
    sa.Column('bms_soc', sa.Float(), nullable=True),
    sa.Column('bms_charging_max_current', sa.Float(), nullable=True),
    sa.Column('bms_discharge_max_current', sa.Float(), nullable=True),
    sa.Column('li_bat_flag', sa.String(length=255), nullable=True),
    sa.Column('temperature_battery', sa.Float(), nullable=True),
    sa.Column('ac_temperature', sa.Float(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('month', sa.Integer(), nullable=True),
    sa.Column('day', sa.Integer(), nullable=True),
    sa.Column('hour', sa.Integer(), nullable=True),
    sa.Column('minute', sa.Integer(), nullable=True),
    sa.Column('second', sa.Integer(), nullable=True),
    sa.Column('inverter_algebra', sa.String(length=255), nullable=True),
    sa.Column('inverter_series_distinction', sa.String(length=255), nullable=True),
    sa.Column('gs_a1', sa.Float(), nullable=True),
    sa.Column('gs_b1', sa.Float(), nullable=True),
    sa.Column('gs_c1', sa.Float(), nullable=True),
    sa.Column('gs_t1', sa.Float(), nullable=True),
    sa.Column('grid_relay_status', sa.String(length=255), nullable=True),
    sa.Column('inverter_power_generation_status', sa.String(length=255), nullable=True),
    sa.Column('gen_power_l1', sa.Float(), nullable=True),
    sa.Column('gen_power_l2', sa.Float(), nullable=True),
    sa.Column('gen_power_l3', sa.Float(), nullable=True),
    sa.Column('gen_voltage_l1', sa.Float(), nullable=True),
    sa.Column('gen_voltage_l2', sa.Float(), nullable=True),
    sa.Column('gen_voltage_l3', sa.Float(), nullable=True),
    sa.Column('gen_daily_run_time', sa.Float(), nullable=True),
    sa.Column('generator_active_power', sa.Float(), nullable=True),
    sa.Column('total_gen_power', sa.Float(), nullable=True),
    sa.Column('daily_production_generator', sa.Float(), nullable=True),
    sa.Column('total_production_generator', sa.Float(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['device_sn'], ['solarman.devices.device_sn'], ),
    sa.PrimaryKeyConstraint('ts', 'device_sn'),
    schema='solarman'
    )
    op.create_index('idx_inverter_data_device_sn', 'inverter_data', ['device_sn'], unique=False, schema='solarman')
    op.create_index('idx_inverter_data_ts', 'inverter_data', ['ts'], unique=False, schema='solarman')
    op.create_table('weather',
    sa.Column('ts', sa.DateTime(timezone=True), nullable=False),
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('station_id', sa.BigInteger(), nullable=False),
    sa.Column('device_id', sa.BigInteger(), nullable=True),
    sa.Column('org_epoch', sa.Integer(), nullable=False),
    sa.Column('epoch', sa.Integer(), nullable=False),
    sa.Column('temp_c', sa.Float(), nullable=True),
    sa.Column('panel_temp', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('rainfall', sa.Float(), nullable=True),
    sa.Column('irr', sa.Float(), nullable=True),
    sa.Column('daily_irr', sa.Float(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['device_sn'], ['solarman.devices.device_sn'], ),
    sa.ForeignKeyConstraint(['station_id'], ['solarman.stations.id'], ),
    sa.PrimaryKeyConstraint('ts', 'device_sn'),
    schema='solarman'
    )
    op.create_index('idx_weather_device_sn', 'weather', ['device_sn'], unique=False, schema='solarman')
    op.create_index('idx_weather_ts', 'weather', ['ts'], unique=False, schema='solarman', postgresql_using='btree', postgresql_ops={'ts': 'desc'})

    # ### end Alembic commands ###


def downgrade_shit() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('newtable',

    )
    op.drop_index('idx_weather_ts', table_name='weather', schema='solarman', postgresql_using='btree', postgresql_ops={'ts': 'desc'})
    op.drop_index('idx_weather_device_sn', table_name='weather', schema='solarman')
    op.drop_table('weather', schema='solarman')
    op.drop_index('idx_inverter_data_ts', table_name='inverter_data', schema='solarman')
    op.drop_index('idx_inverter_data_device_sn', table_name='inverter_data', schema='solarman')
    op.drop_table('inverter_data', schema='solarman')
    op.drop_index('idx_device_site_history_device_sn', table_name='device_site_history', schema='solarman')
    op.drop_table('device_site_history', schema='solarman')
    op.drop_table('temp_weather', schema='solarman')
    op.drop_index('idx_stations_name', table_name='stations', schema='solarman')
    op.drop_table('stations', schema='solarman')
    op.drop_index('idx_station_data_ts', table_name='station_data_daily', schema='solarman')
    op.drop_index('idx_station_data_id', table_name='station_data_daily', schema='solarman')
    op.drop_table('station_data_daily', schema='solarman')
    op.drop_index('idx_devices_device_sn', table_name='devices', schema='solarman')
    op.drop_index('idx_devices_device_id', table_name='devices', schema='solarman')
    op.drop_table('devices', schema='solarman')
    # ### end Alembic commands ###
