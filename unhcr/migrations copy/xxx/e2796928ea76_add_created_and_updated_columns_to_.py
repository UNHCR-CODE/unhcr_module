"""Add created and updated columns to solarman schema tables

Revision ID: e2796928ea76
Revises: 2d4be5c0131d
Create Date: 2025-03-29 13:34:02.485173

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e2796928ea76'
down_revision: Union[str, None] = '2d4be5c0131d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('devices',
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('device_id', sa.BigInteger(), nullable=False),
    sa.Column('device_type', sa.String(length=50), nullable=False),
    sa.Column('connect_status', sa.Integer(), nullable=False),
    sa.Column('collection_time', sa.BigInteger(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('device_sn'),
    schema='solarman'
    )
    op.create_index('idx_devices_device_id', 'devices', ['device_id'], unique=False, schema='solarman')
    op.create_index('idx_devices_device_sn', 'devices', ['device_sn'], unique=False, schema='solarman')
    op.create_table('station_data_daily',
    sa.Column('station_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('ts', sa.DateTime(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('day', sa.Integer(), nullable=False),
    sa.Column('generation_power', sa.Float(), nullable=True),
    sa.Column('use_power', sa.Float(), nullable=True),
    sa.Column('grid_power', sa.Float(), nullable=True),
    sa.Column('purchase_power', sa.Float(), nullable=True),
    sa.Column('wire_power', sa.Float(), nullable=True),
    sa.Column('charge_power', sa.Float(), nullable=True),
    sa.Column('discharge_power', sa.Float(), nullable=True),
    sa.Column('battery_power', sa.Float(), nullable=True),
    sa.Column('battery_soc', sa.Float(), nullable=True),
    sa.Column('irradiate_intensity', sa.Float(), nullable=True),
    sa.Column('generation_value', sa.Float(), nullable=True),
    sa.Column('generation_ratio', sa.Float(), nullable=True),
    sa.Column('grid_ratio', sa.Float(), nullable=True),
    sa.Column('charge_ratio', sa.Float(), nullable=True),
    sa.Column('use_value', sa.Float(), nullable=True),
    sa.Column('use_ratio', sa.Float(), nullable=True),
    sa.Column('buy_ratio', sa.Float(), nullable=True),
    sa.Column('use_discharge_ratio', sa.Float(), nullable=True),
    sa.Column('grid_value', sa.Float(), nullable=True),
    sa.Column('buy_value', sa.Float(), nullable=True),
    sa.Column('charge_value', sa.Float(), nullable=True),
    sa.Column('discharge_value', sa.Float(), nullable=True),
    sa.Column('full_power_hours', sa.Float(), nullable=True),
    sa.Column('irradiate', sa.Float(), nullable=True),
    sa.Column('theoretical_generation', sa.Float(), nullable=True),
    sa.Column('pr', sa.Float(), nullable=True),
    sa.Column('cpr', sa.Float(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('station_id', 'ts'),
    schema='solarman'
    )
    op.create_index('idx_station_data_id', 'station_data_daily', ['station_id'], unique=False, schema='solarman')
    op.create_index('idx_station_data_ts', 'station_data_daily', ['ts'], unique=False, schema='solarman')
    op.create_table('stations',
    sa.Column('id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('location_lat', sa.Float(), nullable=True),
    sa.Column('location_lng', sa.Float(), nullable=True),
    sa.Column('location_address', sa.String(length=255), nullable=True),
    sa.Column('region_nation_id', sa.Integer(), nullable=True),
    sa.Column('region_level1', sa.Integer(), nullable=True),
    sa.Column('region_level2', sa.Integer(), nullable=True),
    sa.Column('region_level3', sa.Integer(), nullable=True),
    sa.Column('region_level4', sa.Integer(), nullable=True),
    sa.Column('region_level5', sa.Integer(), nullable=True),
    sa.Column('region_timezone', sa.String(length=50), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('grid_interconnection_type', sa.String(length=50), nullable=True),
    sa.Column('installed_capacity', sa.Float(), nullable=True),
    sa.Column('start_operating_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('station_image', sa.String(length=255), nullable=True),
    sa.Column('created_date', sa.TIMESTAMP(), nullable=True),
    sa.Column('battery_soc', sa.Float(), nullable=True),
    sa.Column('network_status', sa.String(length=50), nullable=True),
    sa.Column('generation_power', sa.Float(), nullable=True),
    sa.Column('last_update_time', sa.TIMESTAMP(), nullable=True),
    sa.Column('contact_phone', sa.String(length=50), nullable=True),
    sa.Column('owner_name', sa.String(length=255), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_station_name'),
    schema='solarman'
    )
    op.create_index('idx_stations_name', 'stations', ['name'], unique=False, schema='solarman')
    op.create_table('temp_weather',
    sa.Column('station_id', sa.BigInteger(), nullable=True),
    sa.Column('device_id', sa.Integer(), nullable=False),
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('org_epoch', sa.Integer(), nullable=True),
    sa.Column('epoch', sa.Integer(), nullable=True),
    sa.Column('ts', sa.DateTime(timezone=True), nullable=False),
    sa.Column('temp_c', sa.Float(), nullable=True),
    sa.Column('panel_temp', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('rainfall', sa.Float(), nullable=True),
    sa.Column('irr', sa.Float(), nullable=True),
    sa.Column('daily_irr', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('device_id', 'device_sn', 'ts'),
    schema='solarman'
    )
    op.create_table('device_site_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('station_id', sa.BigInteger(), nullable=False),
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('device_id', sa.BigInteger(), nullable=False),
    sa.Column('comment', sa.String(length=255), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['device_sn'], ['solarman.devices.device_sn'], ),
    sa.ForeignKeyConstraint(['station_id'], ['solarman.stations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='solarman'
    )
    op.create_index('idx_device_site_history_device_sn', 'device_site_history', ['device_sn'], unique=False, schema='solarman')
    op.create_table('inverter_data',
    sa.Column('ts', sa.DateTime(), nullable=False),
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('device_id', sa.BigInteger(), nullable=True),
    sa.Column('inverter_type', sa.String(length=255), nullable=True),
    sa.Column('output_power_level', sa.String(length=255), nullable=True),
    sa.Column('rated_power', sa.Numeric(), nullable=True),
    sa.Column('parallel_information', sa.String(length=255), nullable=True),
    sa.Column('device_type', sa.JSON(), nullable=True),
    sa.Column('system_time', sa.DateTime(), nullable=True),
    sa.Column('protocol_version', sa.String(length=255), nullable=True),
    sa.Column('main_data', sa.String(length=255), nullable=True),
    sa.Column('hmi', sa.String(length=255), nullable=True),
    sa.Column('lithium_battery_version_number', sa.String(length=255), nullable=True),
    sa.Column('control_board_activator_version_number', sa.String(length=255), nullable=True),
    sa.Column('control_board_assisted_microcontroller_version_number', sa.String(length=255), nullable=True),
    sa.Column('arc_board_firmware_version', sa.String(length=255), nullable=True),
    sa.Column('dc_voltage_pv1', sa.Float(), nullable=True),
    sa.Column('dc_voltage_pv2', sa.Float(), nullable=True),
    sa.Column('dc_voltage_pv3', sa.Float(), nullable=True),
    sa.Column('dc_voltage_pv4', sa.Float(), nullable=True),
    sa.Column('dc_current_pv1', sa.Float(), nullable=True),
    sa.Column('dc_current_pv2', sa.Float(), nullable=True),
    sa.Column('dc_current_pv3', sa.Float(), nullable=True),
    sa.Column('dc_current_pv4', sa.Float(), nullable=True),
    sa.Column('dc_power_pv1', sa.Float(), nullable=True),
    sa.Column('dc_power_pv2', sa.Float(), nullable=True),
    sa.Column('dc_power_pv3', sa.Float(), nullable=True),
    sa.Column('dc_power_pv4', sa.Float(), nullable=True),
    sa.Column('total_production_active', sa.Float(), nullable=True),
    sa.Column('ac_voltage_r_u_a', sa.Float(), nullable=True),
    sa.Column('ac_voltage_s_v_b', sa.Float(), nullable=True),
    sa.Column('ac_voltage_t_w_c', sa.Float(), nullable=True),
    sa.Column('ac_current_r_u_a', sa.Float(), nullable=True),
    sa.Column('ac_current_s_v_b', sa.Float(), nullable=True),
    sa.Column('ac_current_t_w_c', sa.Float(), nullable=True),
    sa.Column('ac_output_frequency_r', sa.Float(), nullable=True),
    sa.Column('cumulative_production_active', sa.Float(), nullable=True),
    sa.Column('daily_production_active', sa.Float(), nullable=True),
    sa.Column('inverter_output_power_l1', sa.Float(), nullable=True),
    sa.Column('inverter_output_power_l2', sa.Float(), nullable=True),
    sa.Column('inverter_output_power_l3', sa.Float(), nullable=True),
    sa.Column('total_inverter_output_power', sa.Float(), nullable=True),
    sa.Column('total_solar_power', sa.Float(), nullable=True),
    sa.Column('grid_voltage_l1', sa.Float(), nullable=True),
    sa.Column('grid_current_l1', sa.Float(), nullable=True),
    sa.Column('grid_power_l1', sa.Float(), nullable=True),
    sa.Column('grid_voltage_l2', sa.Float(), nullable=True),
    sa.Column('grid_current_l2', sa.Float(), nullable=True),
    sa.Column('grid_power_l2', sa.Float(), nullable=True),
    sa.Column('grid_voltage_l3', sa.Float(), nullable=True),
    sa.Column('grid_current_l3', sa.Float(), nullable=True),
    sa.Column('grid_power_l3', sa.Float(), nullable=True),
    sa.Column('grid_status', sa.String(length=255), nullable=True),
    sa.Column('external_ct1_power', sa.Float(), nullable=True),
    sa.Column('external_ct2_power', sa.Float(), nullable=True),
    sa.Column('external_ct3_power', sa.Float(), nullable=True),
    sa.Column('total_external_ct_power', sa.Float(), nullable=True),
    sa.Column('grid_frequency', sa.Float(), nullable=True),
    sa.Column('total_grid_power', sa.Float(), nullable=True),
    sa.Column('total_grid_reactive_power', sa.Float(), nullable=True),
    sa.Column('a_phase_reactive_power_of_power_grid', sa.Float(), nullable=True),
    sa.Column('b_phase_reactive_power_of_power_grid', sa.Float(), nullable=True),
    sa.Column('c_phase_reactive_power_of_power_grid', sa.Float(), nullable=True),
    sa.Column('daily_energy_buy', sa.Float(), nullable=True),
    sa.Column('daily_energy_sell', sa.Float(), nullable=True),
    sa.Column('total_energy_buy', sa.Float(), nullable=True),
    sa.Column('total_energy_sell', sa.Float(), nullable=True),
    sa.Column('internal_l1_power', sa.Float(), nullable=True),
    sa.Column('internal_l2_power', sa.Float(), nullable=True),
    sa.Column('internal_l3_power', sa.Float(), nullable=True),
    sa.Column('internal_power', sa.Float(), nullable=True),
    sa.Column('inverter_a_phase_reactive_power', sa.Float(), nullable=True),
    sa.Column('inverted_b_phase_reactive_power', sa.Float(), nullable=True),
    sa.Column('inverted_c_phase_reactive_power', sa.Float(), nullable=True),
    sa.Column('mppt_number_of_routes_and_phases', sa.String(length=255), nullable=True),
    sa.Column('load_voltage_l1', sa.Float(), nullable=True),
    sa.Column('load_voltage_l2', sa.Float(), nullable=True),
    sa.Column('load_voltage_l3', sa.Float(), nullable=True),
    sa.Column('load_power_l1', sa.Float(), nullable=True),
    sa.Column('load_power_l2', sa.Float(), nullable=True),
    sa.Column('load_power_l3', sa.Float(), nullable=True),
    sa.Column('total_consumption_power', sa.Float(), nullable=True),
    sa.Column('total_consumption_apparent_power', sa.Float(), nullable=True),
    sa.Column('daily_consumption', sa.Float(), nullable=True),
    sa.Column('total_consumption', sa.Float(), nullable=True),
    sa.Column('load_frequency', sa.Float(), nullable=True),
    sa.Column('load_phase_power_a', sa.Float(), nullable=True),
    sa.Column('load_phase_power_b', sa.Float(), nullable=True),
    sa.Column('load_phase_power_c', sa.Float(), nullable=True),
    sa.Column('battery_status', sa.String(length=255), nullable=True),
    sa.Column('battery_voltage', sa.Float(), nullable=True),
    sa.Column('battery_power1', sa.Float(), nullable=True),
    sa.Column('battery_current1', sa.Float(), nullable=True),
    sa.Column('battery_current2', sa.Float(), nullable=True),
    sa.Column('battery_power', sa.Float(), nullable=True),
    sa.Column('soc', sa.Float(), nullable=True),
    sa.Column('total_charging_energy', sa.Float(), nullable=True),
    sa.Column('total_discharging_energy', sa.Float(), nullable=True),
    sa.Column('daily_charging_energy', sa.Float(), nullable=True),
    sa.Column('daily_discharging_energy', sa.Float(), nullable=True),
    sa.Column('battery_rated_capacity', sa.Float(), nullable=True),
    sa.Column('battery_type', sa.String(length=255), nullable=True),
    sa.Column('battery_mode', sa.JSON(), nullable=True),
    sa.Column('battery_factory', sa.String(length=255), nullable=True),
    sa.Column('battery_1_status', sa.String(length=255), nullable=True),
    sa.Column('battery_total_current', sa.Float(), nullable=True),
    sa.Column('battery_2_status', sa.String(length=255), nullable=True),
    sa.Column('bms_voltage', sa.Float(), nullable=True),
    sa.Column('bms_current', sa.Float(), nullable=True),
    sa.Column('bms_temperature', sa.Float(), nullable=True),
    sa.Column('bms_charge_voltage', sa.Float(), nullable=True),
    sa.Column('bms_discharge_voltage', sa.Float(), nullable=True),
    sa.Column('charge_current_limit', sa.Float(), nullable=True),
    sa.Column('discharge_current_limit', sa.Float(), nullable=True),
    sa.Column('bms_soc', sa.Float(), nullable=True),
    sa.Column('bms_charging_max_current', sa.Float(), nullable=True),
    sa.Column('bms_discharge_max_current', sa.Float(), nullable=True),
    sa.Column('li_bat_flag', sa.String(length=255), nullable=True),
    sa.Column('temperature_battery', sa.Float(), nullable=True),
    sa.Column('ac_temperature', sa.Float(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('month', sa.Integer(), nullable=True),
    sa.Column('day', sa.Integer(), nullable=True),
    sa.Column('hour', sa.Integer(), nullable=True),
    sa.Column('minute', sa.Integer(), nullable=True),
    sa.Column('second', sa.Integer(), nullable=True),
    sa.Column('inverter_algebra', sa.String(length=255), nullable=True),
    sa.Column('inverter_series_distinction', sa.String(length=255), nullable=True),
    sa.Column('gs_a1', sa.Float(), nullable=True),
    sa.Column('gs_b1', sa.Float(), nullable=True),
    sa.Column('gs_c1', sa.Float(), nullable=True),
    sa.Column('gs_t1', sa.Float(), nullable=True),
    sa.Column('grid_relay_status', sa.String(length=255), nullable=True),
    sa.Column('inverter_power_generation_status', sa.String(length=255), nullable=True),
    sa.Column('gen_power_l1', sa.Float(), nullable=True),
    sa.Column('gen_power_l2', sa.Float(), nullable=True),
    sa.Column('gen_power_l3', sa.Float(), nullable=True),
    sa.Column('gen_voltage_l1', sa.Float(), nullable=True),
    sa.Column('gen_voltage_l2', sa.Float(), nullable=True),
    sa.Column('gen_voltage_l3', sa.Float(), nullable=True),
    sa.Column('gen_daily_run_time', sa.Float(), nullable=True),
    sa.Column('generator_active_power', sa.Float(), nullable=True),
    sa.Column('total_gen_power', sa.Float(), nullable=True),
    sa.Column('daily_production_generator', sa.Float(), nullable=True),
    sa.Column('total_production_generator', sa.Float(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['device_sn'], ['solarman.devices.device_sn'], ),
    sa.PrimaryKeyConstraint('ts', 'device_sn'),
    schema='solarman'
    )
    op.create_index('idx_inverter_data_device_sn', 'inverter_data', ['device_sn'], unique=False, schema='solarman')
    op.create_index('idx_inverter_data_ts', 'inverter_data', ['ts'], unique=False, schema='solarman')
    op.create_table('weather',
    sa.Column('ts', sa.DateTime(timezone=True), nullable=False),
    sa.Column('device_sn', sa.String(length=25), nullable=False),
    sa.Column('station_id', sa.BigInteger(), nullable=False),
    sa.Column('device_id', sa.BigInteger(), nullable=True),
    sa.Column('org_epoch', sa.Integer(), nullable=False),
    sa.Column('epoch', sa.Integer(), nullable=False),
    sa.Column('temp_c', sa.Float(), nullable=True),
    sa.Column('panel_temp', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Float(), nullable=True),
    sa.Column('rainfall', sa.Float(), nullable=True),
    sa.Column('irr', sa.Float(), nullable=True),
    sa.Column('daily_irr', sa.Float(), nullable=True),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['device_sn'], ['solarman.devices.device_sn'], ),
    sa.ForeignKeyConstraint(['station_id'], ['solarman.stations.id'], ),
    sa.PrimaryKeyConstraint('ts', 'device_sn'),
    schema='solarman'
    )
    op.create_index('idx_weather_device_sn', 'weather', ['device_sn'], unique=False, schema='solarman')
    op.create_index('idx_weather_ts', 'weather', ['ts'], unique=False, schema='solarman', postgresql_using='btree', postgresql_ops={'ts': 'desc'})
    op.drop_table('takum_leonics_api_raw')
    op.drop_table('gb_gtb_merged_top20')
    op.drop_table('gb_api_no_dups')
    op.drop_table('gtb_gb_unifier')
    op.drop_table('gb_api_unifier_no_dups')
    op.drop_table('gb_gb_gaps')
    op.drop_table('gtb_2024_all_gbs_kwh')
    op.drop_table('gtb_top20')
    op.drop_table('gtb_ttl_wh_2024_gaps')
    op.drop_index('idx_meter_ts', table_name='meter_readings')
    op.drop_index('idx_serial_num', table_name='meter_readings')
    op.drop_index('meter_readings_meter_ts_idx', table_name='meter_readings')
    op.drop_table('meter_readings')
    op.drop_table('gtb_2024_gb_kwh_no_gaps')
    op.drop_table('gb_merged_api_gaps')
    op.drop_table('gb_gb_unifier')
    op.drop_table('gb_top20')
    op.drop_table('gb_api_unifier_matched')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gb_api_unifier_matched',
    sa.Column('unifier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('brand', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gauge_/_meter_uom', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('supplier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('asset_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('model.1', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sensor_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('installation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('serial_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('latest_reading', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('asset_id', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('de_activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('api_matched', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deviceserial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('matchedserial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('score', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('site_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gb_serial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_com', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('gb_top20',
    sa.Column('gateway_serial_no.', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('meter_serial_no.', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code_(old)', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code_(new)', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ins_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('region', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('office_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transfered', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tag_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_st.', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('off_days', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_account', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('dist_site_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('property_sub_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('property_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('energy_specialist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('top_20', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ct_size', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('site_status_of_build', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gb_enrolled', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_shipped', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_delivered', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('installed', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_installed', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('de_activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('replacement_in_case_of_faulty', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('meter_in_unifier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emissions_factor_now', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('emissions_factor_form_the_list', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('emission_factor_was', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('focal_point', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('dist_site_code2', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_account2', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_last_comm._date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('off_days2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ticket_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_of_ticket_raised\nclosed_/_raised', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ticket_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('gb_gb_unifier',
    sa.Column('building_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('brand', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gauge_/_meter_uom', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('supplier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('asset_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('model.1', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sensor_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('installation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('serial_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('latest_reading', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('asset_id', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('de_activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_name', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('gb_merged_api_gaps',
    sa.Column('api_no_dups', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('site_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gb_serial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_com', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gaps', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('epoch_secs', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('prev_epoch', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('diff_seconds', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('from_timestamp', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('to_timestamp', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('days', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('top20', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('gtb_2024_gb_kwh_no_gaps',
    sa.Column('kwh_2024', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('gb_serial', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('meter_readings',
    sa.Column('serial_num', sa.TEXT(), autoincrement=False, nullable=False, comment='Unique identifier for the energy meter'),
    sa.Column('meter_ts', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='Timestamp of the meter reading (stored in UTC)'),
    sa.Column('wh', sa.NUMERIC(), autoincrement=False, nullable=True, comment='Energy consumption in watt-hours (Wh)'),
    sa.PrimaryKeyConstraint('serial_num', 'meter_ts', name='meter_readings_pkey'),
    comment='Stores energy meter readings with timestamps'
    )
    op.create_index('meter_readings_meter_ts_idx', 'meter_readings', [sa.literal_column('meter_ts DESC')], unique=False)
    op.create_index('idx_serial_num', 'meter_readings', ['serial_num'], unique=False)
    op.create_index('idx_meter_ts', 'meter_readings', [sa.literal_column('meter_ts DESC')], unique=False)
    op.create_table('gtb_ttl_wh_2024_gaps',
    sa.Column('table', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('wh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wh_cleaned', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('wh_2024', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wh_median', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wh_ridge', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wh_comp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ridge___comp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unnamed:_9', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('kwh_cleaned', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ttl_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('diff', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ridge', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ridge_2024', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('diff.1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unnamed:_16', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unnamed:_17', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('comp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('comp_2024', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('diff.2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unnamed:_21', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unnamed:_22', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_table('gtb_top20',
    sa.Column('meter_serial_no.', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emissions_factor_now', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('focal_point', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code_(new)', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ins_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('region', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('office_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emissions_factor_form_the_list', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('emission_factor_was', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_table('gtb_2024_all_gbs_kwh',
    sa.Column('table_(had_filled_gaps)', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ttl_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('kwh_2024', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('gb_serial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unifier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('brand', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('installation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('de_activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('top20', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emissions_factor_now', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('focal_point', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code_(new)', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ins_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('region', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('office_name', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('gb_gb_gaps',
    sa.Column('gb_serial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('epoch_secs', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('prev_epoch', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('diff_seconds', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('from_timestamp', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('to_timestamp', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('days', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_table('gb_api_unifier_no_dups',
    sa.Column('unifier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('brand', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gauge_/_meter_uom', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('supplier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('asset_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('model.1', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('sensor_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('installation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('serial_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('latest_reading', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('asset_id', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('de_activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('api_matched', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deviceserial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('matchedserial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('score', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('site_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gb_serial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_com', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('gtb_gb_unifier',
    sa.Column('serial_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('brand', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('installation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('de_activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_name', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('gb_api_no_dups',
    sa.Column('site_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gb_serial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_com', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('gb_gtb_merged_top20',
    sa.Column('api_no_dups', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('site_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gb_serial', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_com', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gaps', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('epoch_secs', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('prev_epoch', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('diff_seconds', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('from_timestamp', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('to_timestamp', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('days', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('top20', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gateway_serial_no.', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('meter_serial_no.', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code_(old)', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('building_code_(new)', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ins_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('region', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('office_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transfered', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tag_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_st.', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('off_days', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_account', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('dist_site_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('property_sub_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('property_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('energy_specialist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('top_20', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ct_size', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('site_status_of_build', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('gb_enrolled', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_shipped', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_delivered', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('installed', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_installed', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('de_activation_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('replacement_in_case_of_faulty', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('meter_in_unifier', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emissions_factor_now', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('emissions_factor_form_the_list', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('emission_factor_was', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('focal_point', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('dist_site_code2', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_account2', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_last_comm._date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('off_days2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ticket_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date_of_ticket_raised\nclosed_/_raised', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ticket_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_table('takum_leonics_api_raw',
    sa.Column('datetimeserver', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('bdi1_power_p1_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_power_p2_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_power_p3_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_total_power_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_freq', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_acinput_voltage_l1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_acinput_voltage_l2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_acinput_voltage_l3', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_acinput_p1_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_acinput_p2_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_acinput_p3_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_acinput_total_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_batt_voltage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_today_supply_ac_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi1_todate_supply_ac_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_power_p1_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_power_p2_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_power_p3_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_total_power_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_freq', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_acinput_voltage_l1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_acinput_voltage_l2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_acinput_voltage_l3', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_acinput_p1_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_acinput_p2_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_acinput_p3_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_acinput_total_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_today_batt_chg_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_todate_batt_chg_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_today_batt_dischg_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bdi2_todate_batt_dischg_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_pv_voltage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_pv_current', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_pv_power_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_chg_voltage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_chg_current', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_chg_power_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_today_chg_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_today_pv_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_todate_chg_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('scc1_todate_pv_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hvb1_avg_v', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hvb1_batt_i', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hvb1_soc', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loadpm_power_p1_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loadpm_power_p2_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loadpm_power_p3_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loadpm_total_p_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loadpm_import_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loadpm_today_import_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_alternator_voltage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_alternator_current', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_alternator_power_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_loadbattery_voltage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_loadbattery_current', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_loadbattery_power_kw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_alternator_temp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_diode_temp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_max_voltage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_max_current', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_low_voltage_start', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_high_voltage_stop', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_low_current_stop', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_oil_pressure', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_coolant_temp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_startingbatteryvoltage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_rpm', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_min_rpm', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_max_rpm', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_engine_runtime', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_ambient_temp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_rpm_frequency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_throttle_stop', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_fuel_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_total_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dcgen_today_kwh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('flowmeter_fuel_temp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('flowmeter_total_fuel_consumption', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('flowmeter_today_fuel_consumption', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('flowmeter_hourly_fuel_consumptionrate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ana1_inv_room_temp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ana2_inv_room_rh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ana3_batt_room_temp', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ana4_batt_room_rh', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ana5_fuel_level1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ana6_fuel_level2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('out1_closemc1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('out2_startgen', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('out3_emergencystop', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('out4', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('out5', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('out6', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('out7', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('out8', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('in1_bdi_fail', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('in2_ats_status', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('in3_door_sw', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('in4', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('in5', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('in6', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('in7', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('in8', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('external_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('external_id', name='takum_leonics_api_raw_pkey'),
    sa.UniqueConstraint('datetimeserver', name='takum_leonics_api_raw_unique')
    )
    op.drop_index('idx_weather_ts', table_name='weather', schema='solarman', postgresql_using='btree', postgresql_ops={'ts': 'desc'})
    op.drop_index('idx_weather_device_sn', table_name='weather', schema='solarman')
    op.drop_table('weather', schema='solarman')
    op.drop_index('idx_inverter_data_ts', table_name='inverter_data', schema='solarman')
    op.drop_index('idx_inverter_data_device_sn', table_name='inverter_data', schema='solarman')
    op.drop_table('inverter_data', schema='solarman')
    op.drop_index('idx_device_site_history_device_sn', table_name='device_site_history', schema='solarman')
    op.drop_table('device_site_history', schema='solarman')
    op.drop_table('temp_weather', schema='solarman')
    op.drop_index('idx_stations_name', table_name='stations', schema='solarman')
    op.drop_table('stations', schema='solarman')
    op.drop_index('idx_station_data_ts', table_name='station_data_daily', schema='solarman')
    op.drop_index('idx_station_data_id', table_name='station_data_daily', schema='solarman')
    op.drop_table('station_data_daily', schema='solarman')
    op.drop_index('idx_devices_device_sn', table_name='devices', schema='solarman')
    op.drop_index('idx_devices_device_id', table_name='devices', schema='solarman')
    op.drop_table('devices', schema='solarman')
    # ### end Alembic commands ###
